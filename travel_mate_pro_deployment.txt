# .github/workflows/deploy.yml - CI/CD Pipeline
name: Deploy Travel Mate Pro

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: travel_mate_pro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma client
      run: npx prisma generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/travel_mate_pro_test
    
    - name: Run database migrations
      run: npx prisma db push
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/travel_mate_pro_test
    
    - name: Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/travel_mate_pro_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key
        NODE_ENV: test
    
    - name: Run linting
      run: npm run lint
    
    - name: Type checking
      run: npm run type-check

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Build Docker image
      run: docker build -t travel-mate-pro:${{ github.sha }} .
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push Docker image
      run: |
        docker tag travel-mate-pro:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/travel-mate-pro:${{ github.sha }}
        docker tag travel-mate-pro:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/travel-mate-pro:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/travel-mate-pro:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/travel-mate-pro:latest

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd /opt/travel-mate-pro
          docker-compose pull
          docker-compose up -d
          docker system prune -f

---

# kubernetes/deployment.yaml - Kubernetes deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: travel-mate-pro
  labels:
    app: travel-mate-pro
spec:
  replicas: 3
  selector:
    matchLabels:
      app: travel-mate-pro
  template:
    metadata:
      labels:
        app: travel-mate-pro
    spec:
      containers:
      - name: travel-mate-pro
        image: travel-mate-pro:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: travel-mate-pro-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: travel-mate-pro-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: travel-mate-pro-secrets
              key: jwt-secret
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: travel-mate-pro-secrets
              key: openai-api-key
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---

# kubernetes/service.yaml - Kubernetes service
apiVersion: v1
kind: Service
metadata:
  name: travel-mate-pro-service
spec:
  selector:
    app: travel-mate-pro
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: LoadBalancer

---

# kubernetes/ingress.yaml - Kubernetes ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: travel-mate-pro-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.travelmateapp.com
    secretName: travel-mate-pro-tls
  rules:
  - host: api.travelmateapp.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: travel-mate-pro-service
            port:
              number: 80

---

# monitoring/prometheus.yml - Prometheus configuration
global:
  scrape_interval: 15s
  evaluation_interval: 15s

scrape_configs:
  - job_name: 'travel-mate-pro'
    static_configs:
      - targets: ['localhost:3000']
    metrics_path: '/metrics'
    scrape_interval: 5s

  - job_name: 'postgres'
    static_configs:
      - targets: ['localhost:9187']

  - job_name: 'redis'
    static_configs:
      - targets: ['localhost:9121']

  - job_name: 'node'
    static_configs:
      - targets: ['localhost:9100']

---

# monitoring/grafana-dashboard.json - Grafana dashboard configuration
{
  "dashboard": {
    "id": null,
    "title": "Travel Mate Pro Dashboard",
    "tags": ["travel", "nodejs", "api"],
    "timezone": "browser",
    "panels": [
      {
        "title": "API Response Time",
        "type": "graph",
        "targets": [
          {
            "expr": "rate(http_request_duration_seconds_sum[5m]) / rate(http_request_duration_seconds_count[5m])",
            "legendFormat": "Average Response Time"
          }
        ]
      },
      {
        "title": "Request Rate",
        "type": "graph",
        "targets": [
          {
            "expr": "rate(http_requests_total[5m])",
            "legendFormat": "{{method}} {{route}}"
          }
        ]
      },
      {
        "title": "Error Rate",
        "type": "graph",
        "targets": [
          {
            "expr": "rate(http_requests_total{status=~\"5..\"}[5m])",
            "legendFormat": "5xx Errors"
          }
        ]
      },
      {
        "title": "Database Connections",
        "type": "graph",
        "targets": [
          {
            "expr": "pg_stat_activity_count",
            "legendFormat": "Active Connections"
          }
        ]
      },
      {
        "title": "Memory Usage",
        "type": "graph",
        "targets": [
          {
            "expr": "process_resident_memory_bytes",
            "legendFormat": "Memory Usage"
          }
        ]
      }
    ],
    "time": {
      "from": "now-1h",
      "to": "now"
    },
    "refresh": "5s"
  }
}

---

# nginx.conf - Nginx configuration
events {
    worker_connections 1024;
}

http {
    upstream app {
        server app:3000;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;

    server {
        listen 80;
        server_name api.travelmateapp.com;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name api.travelmateapp.com;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # API rate limiting
        location /api/auth {
            limit_req zone=auth burst=5;
            proxy_pass http://app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api {
            limit_req zone=api burst=20;
            proxy_pass http://app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check
        location /health {
            access_log off;
            proxy_pass http://app;
        }

        # Static files
        location /static {
            alias /app/public;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
}

---

# scripts/deploy.sh - Deployment script
#!/bin/bash

set -e

echo "🚀 Starting deployment of Travel Mate Pro..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
APP_NAME="travel-mate-pro"
DOCKER_IMAGE="travel-mate-pro:latest"
COMPOSE_FILE="docker-compose.production.yml"

# Functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Pre-deployment checks
check_requirements() {
    log_info "Checking requirements..."
    
    command -v docker >/dev/null 2>&1 || { log_error "Docker is required but not installed."; exit 1; }
    command -v docker-compose >/dev/null 2>&1 || { log_error "Docker Compose is required but not installed."; exit 1; }
    
    log_info "All requirements met ✓"
}

# Database backup
backup_database() {
    log_info "Creating database backup..."
    
    BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
    
    docker-compose exec -T db pg_dump -U postgres travel_mate_pro > "backups/$BACKUP_FILE"
    
    log_info "Database backup created: $BACKUP_FILE ✓"
}

# Deploy application
deploy_app() {
    log_info "Deploying application..."
    
    # Pull latest images
    docker-compose -f $COMPOSE_FILE pull
    
    # Stop existing containers
    docker-compose -f $COMPOSE_FILE down
    
    # Start new containers
    docker-compose -f $COMPOSE_FILE up -d
    
    log_info "Application deployed ✓"
}

# Run database migrations
run_migrations() {
    log_info "Running database migrations..."
    
    docker-compose -f $COMPOSE_FILE exec app npx prisma migrate deploy
    
    log_info "Database migrations completed ✓"
}

# Health check
health_check() {
    log_info "Performing health check..."
    
    sleep 10  # Wait for app to start
    
    for i in {1..30}; do
        if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
            log_info "Health check passed ✓"
            return 0
        fi
        echo "Waiting for app to be ready... ($i/30)"
        sleep 2
    done
    
    log_error "Health check failed"
    exit 1
}

# Cleanup
cleanup() {
    log_info "Cleaning up..."
    
    # Remove unused images
    docker image prune -f
    
    # Remove old backups (keep last 10)
    ls -t backups/backup_*.sql | tail -n +11 | xargs -r rm
    
    log_info "Cleanup completed ✓"
}

# Main deployment process
main() {
    log_info "Starting deployment process..."
    
    check_requirements
    backup_database
    deploy_app
    run_migrations
    health_check
    cleanup
    
    log_info "🎉 Deployment completed successfully!"
}

# Run deployment
main "$@"

---

# scripts/setup.sh - Initial setup script
#!/bin/bash

set -e

echo "🔧 Setting up Travel Mate Pro development environment..."

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

# Check if .env file exists
if [ ! -f .env ]; then
    log_info "Creating .env file from template..."
    cp .env.example .env
    log_warn "Please update .env file with your configuration values"
fi

# Install dependencies
log_info "Installing dependencies..."
npm install

# Setup database
log_info "Setting up database..."
docker-compose up -d db redis

# Wait for database to be ready
log_info "Waiting for database to be ready..."
sleep 10

# Generate Prisma client
log_info "Generating Prisma client..."
npx prisma generate

# Run migrations
log_info "Running database migrations..."
npx prisma db push

# Seed database with initial data
log_info "Seeding database..."
npm run db:seed

# Setup Git hooks
log_info "Setting up Git hooks..."
npx husky install

log_info "✅ Setup completed successfully!"
log_info "Run 'npm run dev' to start the development server"

---

# README.md - Project documentation
# Travel Mate Pro 🌍

A comprehensive AI-powered travel planning platform with advanced features including IoT integration, social community, sustainability tracking, and real-time collaboration.

## Features

### Core Features
- **AI Personal Travel Concierge** - Personalized travel recommendations based on user personality
- **Smart Itinerary Planning** - Intelligent trip planning with real-time updates
- **Social Travel Community** - Connect with like-minded travelers
- **Carbon Neutral Travel** - Track and offset your travel carbon footprint
- **IoT Integration** - Smart device integration for enhanced travel experience
- **Advanced Analytics** - Comprehensive business intelligence and user insights
- **Real-time Collaboration** - Collaborative trip planning with friends and family

### Advanced Features
- **Fraud Detection** - ML-powered security and fraud prevention
- **Metaverse Integration** - Virtual travel experiences and NFT passport
- **Predictive Analytics** - AI-driven travel predictions and recommendations
- **Multi-currency Support** - Global payment processing with Stripe
- **Real-time Notifications** - Push notifications and email alerts
- **Comprehensive API** - RESTful API with extensive documentation

## Tech Stack

### Backend
- **Framework**: Next.js 14 (API Routes)
- **Database**: PostgreSQL with Prisma ORM
- **Cache**: Redis for session management and caching
- **Authentication**: JWT with bcrypt password hashing
- **AI Integration**: OpenAI GPT-4 for personalized recommendations
- **Payment Processing**: Stripe for secure transactions
- **Real-time**: Socket.io for live collaboration

### Security & Performance
- **Rate Limiting**: Express rate limiter with Redis backend
- **Security Headers**: Helmet.js for security headers
- **Input Validation**: Joi for comprehensive request validation
- **Error Handling**: Centralized error handling with Winston logging
- **Monitoring**: Prometheus metrics with Grafana dashboards

### DevOps & Deployment
- **Containerization**: Docker with Docker Compose
- **CI/CD**: GitHub Actions for automated testing and deployment
- **Orchestration**: Kubernetes deployment configuration
- **Monitoring**: Comprehensive logging and monitoring setup
- **Load Balancing**: Nginx reverse proxy with SSL termination

## Quick Start

### Prerequisites
- Node.js 18+
- Docker and Docker Compose
- PostgreSQL 15+
- Redis 7+

### Installation

1. **Clone the repository**
   ```bash
   git clone https://github.com/yourusername/travel-mate-pro.git
   cd travel-mate-pro
   ```

2. **Run setup script**
   ```bash
   chmod +x scripts/setup.sh
   ./scripts/setup.sh
   ```

3. **Configure environment variables**
   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   ```

4. **Start development server**
   ```bash
   npm run dev
   ```

The application will be available at `http://localhost:3000`

## API Documentation

### Authentication Endpoints

#### Register User
```http
POST /api/auth/register
Content-Type: application/json

{
  "email": "user@example.com",
  "name": "John Doe",
  "password": "securepassword123"
}
```

#### Login
```http
POST /api/auth/login
Content-Type: application/json

{
  "email": "user@example.com",
  "password": "securepassword123"
}
```

### Travel Planning Endpoints

#### Create Itinerary
```http
POST /api/itineraries/create
Authorization: Bearer <token>
Content-Type: application/json

{
  "title": "European Adventure",
  "destination": "Paris, France",
  "startDate": "2024-06-01",
  "endDate": "2024-06-10",
  "budget": 2000,
  "travelers": 2
}
```

#### AI Travel Concierge
```http
POST /api/ai/personal-travel-concierge
Authorization: Bearer <token>
Content-Type: application/json

{
  "message": "I want to plan a relaxing vacation in Japan",
  "conversationId": "conv_123",
  "personalityProfile": {
    "extraversion": 6,
    "openness": 8,
    "conscientiousness": 7
  }
}
```

### Social Features

#### Find Travel Buddies
```http
POST /api/social/travel-community
Authorization: Bearer <token>
Content-Type: application/json

{
  "action": "find_travel_buddies",
  "filters": {
    "destination": "Japan",
    "travelDates": ["2024-06-01", "2024-06-10"],
    "interests": ["culture", "food", "adventure"]
  }
}
```

## Environment Variables

Create a `.env` file with the following variables:

```env
# Database
DATABASE_URL="postgresql://username:password@localhost:5432/travel_mate_pro"

# Redis
REDIS_URL="redis://localhost:6379"

# Authentication
JWT_SECRET="your-super-secret-jwt-key"

# External APIs
OPENAI_API_KEY="your-openai-api-key"
STRIPE_SECRET_KEY="your-stripe-secret-key"
STRIPE_WEBHOOK_SECRET="your-stripe-webhook-secret"

# Email
SMTP_HOST="smtp.gmail.com"
SMTP_PORT=587
SMTP_USER="your-email@gmail.com"
SMTP_PASSWORD="your-app-password"

# File Storage
CLOUDINARY_CLOUD_NAME="your-cloudinary-name"
CLOUDINARY_API_KEY="your-cloudinary-key"
CLOUDINARY_API_SECRET="your-cloudinary-secret"

# Monitoring
SENTRY_DSN="your-sentry-dsn"
```

## Development

### Running Tests
```bash
# Run all tests
npm test

# Run tests in watch mode
npm run test:watch

# Run tests with coverage
npm run test:coverage
```

### Database Operations
```bash
# Generate Prisma client
npx prisma generate

# Run migrations
npx prisma migrate dev

# Reset database
npx prisma migrate reset

# Open Prisma Studio
npx prisma studio
```

### Code Quality
```bash
# Run linting
npm run lint

# Fix linting issues
npm run lint:fix

# Type checking
npm run type-check

# Format code
npm run format
```

## Production Deployment

### Docker Deployment
```bash
# Build and run with Docker Compose
docker-compose up -d

# Check logs
docker-compose logs -f app

# Stop services
docker-compose down
```

### Kubernetes Deployment
```bash
# Apply Kubernetes manifests
kubectl apply -f kubernetes/

# Check deployment status
kubectl get pods -l app=travel-mate-pro

# View logs
kubectl logs -f deployment/travel-mate-pro
```

### Automated Deployment
The project includes GitHub Actions for automated CI/CD:

1. **Testing**: Runs tests on every PR
2. **Building**: Builds Docker images
3. **Deployment**: Deploys to production on main branch

## Monitoring

### Health Checks
- **Endpoint**: `/api/health`
- **Database**: Connection status
- **Redis**: Connection status
- **External APIs**: Service availability

### Metrics
- **Prometheus**: Application metrics
- **Grafana**: Dashboards and visualization
- **Logging**: Structured logging with Winston

### Alerts
- **Error Rate**: >5% error rate
- **Response Time**: >1s average response time
- **Database**: Connection failures
- **Memory**: >80% memory usage

## Security Features

### Authentication & Authorization
- JWT tokens with refresh mechanism
- Password hashing with bcrypt
- Rate limiting on authentication endpoints
- Two-factor authentication support

### Data Protection
- Input validation with Joi
- SQL injection prevention with Prisma
- XSS protection with helmet
- CSRF protection

### Monitoring & Fraud Detection
- ML-powered fraud detection
- Behavioral analysis
- Real-time alerting
- Comprehensive audit logging

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

### Development Guidelines
- Follow existing code style
- Write comprehensive tests
- Update documentation
- Ensure all checks pass

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Support

For support, email support@travelmateapp.com or join our Discord community.

---

Made with ❤️ by the Travel Mate Pro team
